import XCTest
@testable import PGNKit

final class PGNKitTests: XCTestCase {
    func testParsingSingleGameFromFile() throws {
        var parser = try PGNParser(url: MockData.singleGameFileURL)
        let visitor = TestableVisitor()
        try parser.readGame(visitor: visitor)
        
        let expectation: [VisitorEvent] = [
            .beginGame,
            .beginHeaders,
            .header(key: "Event", value: "F/S Return Match"),
            .header(key: "Site", value: "Belgrade, Serbia JUG"),
            .header(key: "Date", value: "1992.11.04"),
            .header(key: "Round", value: "29"),
            .header(key: "White", value: "Fischer, Robert J."),
            .header(key: "Black", value: "Spassky, Boris V."),
            .header(key: "Result", value: "1/2-1/2"),
            .endHeaders,
            .san("e4"),
            .san("e5"),
            .san("Nf3"),
            .san("Nc6"),
            .san("Bb5"),
            .comment("This opening is called the Ruy Lopez."),
            .san("a6"),
            .san("Ba4"),
            .san("Nf6"),
            .san("O-O"),
            .san("Be7"),
            .san("Re1"),
            .san("b5"),
            .san("Bb3"),
            .san("d6"),
            .san("c3"),
            .san("O-O"),
            .san("h3"),
            .san("Nb8"),
            .san("d4"),
            .san("Nbd7"),
            .san("c4"),
            .san("c6"),
            .san("cxb5"),
            .san("axb5"),
            .san("Nc3"),
            .san("Bb7"),
            .san("Bg5"),
            .san("b4"),
            .san("Nb1"),
            .san("h6"),
            .san("Bh4"),
            .san("c5"),
            .san("dxe5"),
            .san("Nxe4"),
            .san("Bxe7"),
            .san("Qxe7"),
            .san("exd6"),
            .san("Qf6"),
            .san("Nbd2"),
            .san("Nxd6"),
            .san("Nc4"),
            .san("Nxc4"),
            .san("Bxc4"),
            .san("Nb6"),
            .san("Ne5"),
            .san("Rae8"),
            .san("Bxf7+"),
            .san("Rxf7"),
            .san("Nxf7"),
            .san("Rxe1+"),
            .san("Qxe1"),
            .san("Kxf7"),
            .san("Qe3"),
            .san("Qg5"),
            .san("Qxg5"),
            .san("hxg5"),
            .san("b3"),
            .san("Ke6"),
            .san("a3"),
            .san("Kd6"),
            .san("axb4"),
            .san("cxb4"),
            .san("Ra5"),
            .san("Nd5"),
            .san("f3"),
            .san("Bc8"),
            .san("Kf2"),
            .san("Bf5"),
            .san("Ra7"),
            .san("g6"),
            .san("Ra6+"),
            .san("Kc5"),
            .san("Ke1"),
            .san("Nf4"),
            .san("g3"),
            .san("Nxh3"),
            .san("Kd2"),
            .san("Kb5"),
            .san("Rd6"),
            .san("Kc5"),
            .san("Ra6"),
            .san("Nf2"),
            .san("g4"),
            .san("Bd3"),
            .san("Re6"),
            .outcome(.draw),
            .endGame
        ]
        let actual = visitor.events
        XCTAssertEqual(expectation, actual)
    }
    
    func testParsingSingleGameFromMemory() throws {
        var parser = PGNParser(string: MockData.singleGame)
        let visitor = TestableVisitor()
        try parser.readGame(visitor: visitor)
        
        let expectation: [VisitorEvent] = [
            .beginGame,
            .beginHeaders,
            .header(key: "Event", value: "F/S Return Match"),
            .header(key: "Site", value: "Belgrade, Serbia JUG"),
            .header(key: "Date", value: "1992.11.04"),
            .header(key: "Round", value: "29"),
            .header(key: "White", value: "Fischer, Robert J."),
            .header(key: "Black", value: "Spassky, Boris V."),
            .header(key: "Result", value: "1/2-1/2"),
            .endHeaders,
            .san("e4"),
            .san("e5"),
            .san("Nf3"),
            .san("Nc6"),
            .san("Bb5"),
            .comment("This opening is called the Ruy Lopez."),
            .san("a6"),
            .san("Ba4"),
            .san("Nf6"),
            .san("O-O"),
            .san("Be7"),
            .san("Re1"),
            .san("b5"),
            .san("Bb3"),
            .san("d6"),
            .san("c3"),
            .san("O-O"),
            .san("h3"),
            .san("Nb8"),
            .san("d4"),
            .san("Nbd7"),
            .san("c4"),
            .san("c6"),
            .san("cxb5"),
            .san("axb5"),
            .san("Nc3"),
            .san("Bb7"),
            .san("Bg5"),
            .san("b4"),
            .san("Nb1"),
            .san("h6"),
            .san("Bh4"),
            .san("c5"),
            .san("dxe5"),
            .san("Nxe4"),
            .san("Bxe7"),
            .san("Qxe7"),
            .san("exd6"),
            .san("Qf6"),
            .san("Nbd2"),
            .san("Nxd6"),
            .san("Nc4"),
            .san("Nxc4"),
            .san("Bxc4"),
            .san("Nb6"),
            .san("Ne5"),
            .san("Rae8"),
            .san("Bxf7+"),
            .san("Rxf7"),
            .san("Nxf7"),
            .san("Rxe1+"),
            .san("Qxe1"),
            .san("Kxf7"),
            .san("Qe3"),
            .san("Qg5"),
            .san("Qxg5"),
            .san("hxg5"),
            .san("b3"),
            .san("Ke6"),
            .san("a3"),
            .san("Kd6"),
            .san("axb4"),
            .san("cxb4"),
            .san("Ra5"),
            .san("Nd5"),
            .san("f3"),
            .san("Bc8"),
            .san("Kf2"),
            .san("Bf5"),
            .san("Ra7"),
            .san("g6"),
            .san("Ra6+"),
            .san("Kc5"),
            .san("Ke1"),
            .san("Nf4"),
            .san("g3"),
            .san("Nxh3"),
            .san("Kd2"),
            .san("Kb5"),
            .san("Rd6"),
            .san("Kc5"),
            .san("Ra6"),
            .san("Nf2"),
            .san("g4"),
            .san("Bd3"),
            .san("Re6"),
            .outcome(.draw),
            .endGame
        ]
        let actual = visitor.events
        XCTAssertEqual(expectation, actual)
    }
    
    func testParsingMultipleGamesFromMemory() throws {
        let parser = PGNParser(string: MockData.multipleGames)
        let visitor = TestableVisitor()
        try parser.readGames(visitor: visitor)
        
        let expectation: [VisitorEvent] = [
            .beginGame,
            .beginHeaders,
            .header(key: "Event", value: "F/S Return Match"),
            .header(key: "Site", value: "Belgrade, Serbia JUG"),
            .header(key: "Date", value: "1992.11.04"),
            .header(key: "Round", value: "29"),
            .header(key: "White", value: "Fischer, Robert J."),
            .header(key: "Black", value: "Spassky, Boris V."),
            .header(key: "Result", value: "1/2-1/2"),
            .endHeaders,
            .san("e4"),
            .san("e5"),
            .san("Nf3"),
            .san("Nc6"),
            .san("Bb5"),
            .comment("This opening is called the Ruy Lopez."),
            .san("a6"),
            .san("Ba4"),
            .san("Nf6"),
            .san("O-O"),
            .san("Be7"),
            .san("Re1"),
            .san("b5"),
            .san("Bb3"),
            .san("d6"),
            .san("c3"),
            .san("O-O"),
            .san("h3"),
            .san("Nb8"),
            .san("d4"),
            .san("Nbd7"),
            .san("c4"),
            .san("c6"),
            .san("cxb5"),
            .san("axb5"),
            .san("Nc3"),
            .san("Bb7"),
            .san("Bg5"),
            .san("b4"),
            .san("Nb1"),
            .san("h6"),
            .san("Bh4"),
            .san("c5"),
            .san("dxe5"),
            .san("Nxe4"),
            .san("Bxe7"),
            .san("Qxe7"),
            .san("exd6"),
            .san("Qf6"),
            .san("Nbd2"),
            .san("Nxd6"),
            .san("Nc4"),
            .san("Nxc4"),
            .san("Bxc4"),
            .san("Nb6"),
            .san("Ne5"),
            .san("Rae8"),
            .san("Bxf7+"),
            .san("Rxf7"),
            .san("Nxf7"),
            .san("Rxe1+"),
            .san("Qxe1"),
            .san("Kxf7"),
            .san("Qe3"),
            .san("Qg5"),
            .san("Qxg5"),
            .san("hxg5"),
            .san("b3"),
            .san("Ke6"),
            .san("a3"),
            .san("Kd6"),
            .san("axb4"),
            .san("cxb4"),
            .san("Ra5"),
            .san("Nd5"),
            .san("f3"),
            .san("Bc8"),
            .san("Kf2"),
            .san("Bf5"),
            .san("Ra7"),
            .san("g6"),
            .san("Ra6+"),
            .san("Kc5"),
            .san("Ke1"),
            .san("Nf4"),
            .san("g3"),
            .san("Nxh3"),
            .san("Kd2"),
            .san("Kb5"),
            .san("Rd6"),
            .san("Kc5"),
            .san("Ra6"),
            .san("Nf2"),
            .san("g4"),
            .san("Bd3"),
            .san("Re6"),
            .outcome(.draw),
            .endGame,
            .beginGame,
            .beginHeaders,
            .header(key: "Event", value: "IBM Kasparov vs. Deep Blue Rematch"),
            .header(key: "Site", value: "New York, NY USA"),
            .header(key: "Date", value: "1997.05.11"),
            .header(key: "Round", value: "6"),
            .header(key: "White", value: "Deep Blue"),
            .header(key: "Black", value: "Kasparov, Garry"),
            .header(key: "Opening", value: "Caro-Kann: 4...Nd7"),
            .header(key: "ECO", value: "B17"),
            .header(key: "Result", value: "1-0"),
            .endHeaders,
            .san("e4"),
            .san("c6"),
            .san("d4"),
            .san("d5"),
            .san("Nc3"),
            .san("dxe4"),
            .san("Nxe4"),
            .san("Nd7"),
            .san("Ng5"),
            .san("Ngf6"),
            .san("Bd3"),
            .san("e6"),
            .san("N1f3"),
            .san("h6"),
            .san("Nxe6"),
            .san("Qe7"),
            .san("O-O"),
            .san("fxe6"),
            .san("Bg6+"),
            .san("Kd8"),
            .comment("Kasparov schüttelt kurz den Kopf"),
            .san("Bf4"),
            .san("b5"),
            .san("a4"),
            .san("Bb7"),
            .san("Re1"),
            .san("Nd5"),
            .san("Bg3"),
            .san("Kc8"),
            .san("axb5"),
            .san("cxb5"),
            .san("Qd3"),
            .san("Bc6"),
            .san("Bf5"),
            .san("exf5"),
            .san("Rxe7"),
            .san("Bxe7"),
            .san("c4"),
            .outcome(.decisive(winner: .white)),
            .endGame
        ]
        let actual = visitor.events
        XCTAssertEqual(expectation, actual)
    }
    
    func testParsingMultipleGamesFromFile() throws {
        let parser = try PGNParser(url: MockData.multipleGamesFileURL)
        let visitor = TestableVisitor()
        try parser.readGames(visitor: visitor)
        
        let expectation: [VisitorEvent] = [
            .beginGame,
            .beginHeaders,
            .header(key: "Event", value: "F/S Return Match"),
            .header(key: "Site", value: "Belgrade, Serbia JUG"),
            .header(key: "Date", value: "1992.11.04"),
            .header(key: "Round", value: "29"),
            .header(key: "White", value: "Fischer, Robert J."),
            .header(key: "Black", value: "Spassky, Boris V."),
            .header(key: "Result", value: "1/2-1/2"),
            .endHeaders,
            .san("e4"),
            .san("e5"),
            .san("Nf3"),
            .san("Nc6"),
            .san("Bb5"),
            .comment("This opening is called the Ruy Lopez."),
            .san("a6"),
            .san("Ba4"),
            .san("Nf6"),
            .san("O-O"),
            .san("Be7"),
            .san("Re1"),
            .san("b5"),
            .san("Bb3"),
            .san("d6"),
            .san("c3"),
            .san("O-O"),
            .san("h3"),
            .san("Nb8"),
            .san("d4"),
            .san("Nbd7"),
            .san("c4"),
            .san("c6"),
            .san("cxb5"),
            .san("axb5"),
            .san("Nc3"),
            .san("Bb7"),
            .san("Bg5"),
            .san("b4"),
            .san("Nb1"),
            .san("h6"),
            .san("Bh4"),
            .san("c5"),
            .san("dxe5"),
            .san("Nxe4"),
            .san("Bxe7"),
            .san("Qxe7"),
            .san("exd6"),
            .san("Qf6"),
            .san("Nbd2"),
            .san("Nxd6"),
            .san("Nc4"),
            .san("Nxc4"),
            .san("Bxc4"),
            .san("Nb6"),
            .san("Ne5"),
            .san("Rae8"),
            .san("Bxf7+"),
            .san("Rxf7"),
            .san("Nxf7"),
            .san("Rxe1+"),
            .san("Qxe1"),
            .san("Kxf7"),
            .san("Qe3"),
            .san("Qg5"),
            .san("Qxg5"),
            .san("hxg5"),
            .san("b3"),
            .san("Ke6"),
            .san("a3"),
            .san("Kd6"),
            .san("axb4"),
            .san("cxb4"),
            .san("Ra5"),
            .san("Nd5"),
            .san("f3"),
            .san("Bc8"),
            .san("Kf2"),
            .san("Bf5"),
            .san("Ra7"),
            .san("g6"),
            .san("Ra6+"),
            .san("Kc5"),
            .san("Ke1"),
            .san("Nf4"),
            .san("g3"),
            .san("Nxh3"),
            .san("Kd2"),
            .san("Kb5"),
            .san("Rd6"),
            .san("Kc5"),
            .san("Ra6"),
            .san("Nf2"),
            .san("g4"),
            .san("Bd3"),
            .san("Re6"),
            .outcome(.draw),
            .endGame,
            .beginGame,
            .beginHeaders,
            .header(key: "Event", value: "IBM Kasparov vs. Deep Blue Rematch"),
            .header(key: "Site", value: "New York, NY USA"),
            .header(key: "Date", value: "1997.05.11"),
            .header(key: "Round", value: "6"),
            .header(key: "White", value: "Deep Blue"),
            .header(key: "Black", value: "Kasparov, Garry"),
            .header(key: "Opening", value: "Caro-Kann: 4...Nd7"),
            .header(key: "ECO", value: "B17"),
            .header(key: "Result", value: "1-0"),
            .endHeaders,
            .san("e4"),
            .san("c6"),
            .san("d4"),
            .san("d5"),
            .san("Nc3"),
            .san("dxe4"),
            .san("Nxe4"),
            .san("Nd7"),
            .san("Ng5"),
            .san("Ngf6"),
            .san("Bd3"),
            .san("e6"),
            .san("N1f3"),
            .san("h6"),
            .san("Nxe6"),
            .san("Qe7"),
            .san("O-O"),
            .san("fxe6"),
            .san("Bg6+"),
            .san("Kd8"),
            .comment("Kasparov schüttelt kurz den Kopf"),
            .san("Bf4"),
            .san("b5"),
            .san("a4"),
            .san("Bb7"),
            .san("Re1"),
            .san("Nd5"),
            .san("Bg3"),
            .san("Kc8"),
            .san("axb5"),
            .san("cxb5"),
            .san("Qd3"),
            .san("Bc6"),
            .san("Bf5"),
            .san("exf5"),
            .san("Rxe7"),
            .san("Bxe7"),
            .san("c4"),
            .outcome(.decisive(winner: .white)),
            .endGame
        ]
        let actual = visitor.events
        XCTAssertEqual(expectation, actual)
    }

    func testIterator() throws {
        let parser = PGNParser(string: MockData.multipleGames)
        let visitor = TestableVisitor()
        var iterator = parser.makeIterator(visitor: visitor)
        
        var expectation: [VisitorEvent] = [
            .beginGame,
            .beginHeaders,
            .header(key: "Event", value: "F/S Return Match"),
            .header(key: "Site", value: "Belgrade, Serbia JUG"),
            .header(key: "Date", value: "1992.11.04"),
            .header(key: "Round", value: "29"),
            .header(key: "White", value: "Fischer, Robert J."),
            .header(key: "Black", value: "Spassky, Boris V."),
            .header(key: "Result", value: "1/2-1/2"),
            .endHeaders,
            .san("e4"),
            .san("e5"),
            .san("Nf3"),
            .san("Nc6"),
            .san("Bb5"),
            .comment("This opening is called the Ruy Lopez."),
            .san("a6"),
            .san("Ba4"),
            .san("Nf6"),
            .san("O-O"),
            .san("Be7"),
            .san("Re1"),
            .san("b5"),
            .san("Bb3"),
            .san("d6"),
            .san("c3"),
            .san("O-O"),
            .san("h3"),
            .san("Nb8"),
            .san("d4"),
            .san("Nbd7"),
            .san("c4"),
            .san("c6"),
            .san("cxb5"),
            .san("axb5"),
            .san("Nc3"),
            .san("Bb7"),
            .san("Bg5"),
            .san("b4"),
            .san("Nb1"),
            .san("h6"),
            .san("Bh4"),
            .san("c5"),
            .san("dxe5"),
            .san("Nxe4"),
            .san("Bxe7"),
            .san("Qxe7"),
            .san("exd6"),
            .san("Qf6"),
            .san("Nbd2"),
            .san("Nxd6"),
            .san("Nc4"),
            .san("Nxc4"),
            .san("Bxc4"),
            .san("Nb6"),
            .san("Ne5"),
            .san("Rae8"),
            .san("Bxf7+"),
            .san("Rxf7"),
            .san("Nxf7"),
            .san("Rxe1+"),
            .san("Qxe1"),
            .san("Kxf7"),
            .san("Qe3"),
            .san("Qg5"),
            .san("Qxg5"),
            .san("hxg5"),
            .san("b3"),
            .san("Ke6"),
            .san("a3"),
            .san("Kd6"),
            .san("axb4"),
            .san("cxb4"),
            .san("Ra5"),
            .san("Nd5"),
            .san("f3"),
            .san("Bc8"),
            .san("Kf2"),
            .san("Bf5"),
            .san("Ra7"),
            .san("g6"),
            .san("Ra6+"),
            .san("Kc5"),
            .san("Ke1"),
            .san("Nf4"),
            .san("g3"),
            .san("Nxh3"),
            .san("Kd2"),
            .san("Kb5"),
            .san("Rd6"),
            .san("Kc5"),
            .san("Ra6"),
            .san("Nf2"),
            .san("g4"),
            .san("Bd3"),
            .san("Re6"),
            .outcome(.draw),
            .endGame
        ]
        
        XCTAssertNotNil(iterator.next())
        XCTAssertEqual(expectation, visitor.events)
        
        expectation.append(contentsOf: [
            .beginGame,
            .beginHeaders,
            .header(key: "Event", value: "IBM Kasparov vs. Deep Blue Rematch"),
            .header(key: "Site", value: "New York, NY USA"),
            .header(key: "Date", value: "1997.05.11"),
            .header(key: "Round", value: "6"),
            .header(key: "White", value: "Deep Blue"),
            .header(key: "Black", value: "Kasparov, Garry"),
            .header(key: "Opening", value: "Caro-Kann: 4...Nd7"),
            .header(key: "ECO", value: "B17"),
            .header(key: "Result", value: "1-0"),
            .endHeaders,
            .san("e4"),
            .san("c6"),
            .san("d4"),
            .san("d5"),
            .san("Nc3"),
            .san("dxe4"),
            .san("Nxe4"),
            .san("Nd7"),
            .san("Ng5"),
            .san("Ngf6"),
            .san("Bd3"),
            .san("e6"),
            .san("N1f3"),
            .san("h6"),
            .san("Nxe6"),
            .san("Qe7"),
            .san("O-O"),
            .san("fxe6"),
            .san("Bg6+"),
            .san("Kd8"),
            .comment("Kasparov schüttelt kurz den Kopf"),
            .san("Bf4"),
            .san("b5"),
            .san("a4"),
            .san("Bb7"),
            .san("Re1"),
            .san("Nd5"),
            .san("Bg3"),
            .san("Kc8"),
            .san("axb5"),
            .san("cxb5"),
            .san("Qd3"),
            .san("Bc6"),
            .san("Bf5"),
            .san("exf5"),
            .san("Rxe7"),
            .san("Bxe7"),
            .san("c4"),
            .outcome(.decisive(winner: .white)),
            .endGame
        ])
        
        XCTAssertNotNil(iterator.next())
        XCTAssertEqual(expectation, visitor.events)
                
        XCTAssertNil(iterator.next())
    }
    
    func testEmptyGame() throws {
        var parser = PGNParser(string: MockData.emptyGame)
        let visitor = TestableVisitor()
        
        XCTAssertNoThrow(
            try parser.readGame(visitor: visitor)
        )
    }
    
    func testTrailingSpace() throws {
        var parser = PGNParser(string: MockData.gameWithTrailingSpace)
        let visitor = TestableVisitor()
        
        try parser.readGame(visitor: visitor)
        XCTAssertEqual(visitor.events.filter({ $0 == .endGame }).count, 1)
        try parser.readGame(visitor: visitor)
        XCTAssertEqual(visitor.events.filter({ $0 == .endGame }).count, 1)
    }
    
    func testNagParsing() throws {
        var parser = PGNParser(string: MockData.gameWithNags)
        let visitor = TestableVisitor()
        
        let expectation: [Nag] = [
            .goodMove,
            .init(rawValue: 71)!,
            .blunder,
            .speculativeMove
        ]
        try parser.readGame(visitor: visitor)
        let actual = visitor.nags
        XCTAssertEqual(expectation, actual)
    }
    
    func testNullMoves() throws {
        var parser = PGNParser(string: MockData.gameWithNullMoves)
        let visitor = TestableVisitor()
        
        let expectation: [String] = [
            "e4",
            "--",
            "Nf3",
            "--",
            "--",
            "e5"
        ]
        try parser.readGame(visitor: visitor)
        let actual = visitor.sans
        XCTAssertEqual(expectation, actual)
    }
}
